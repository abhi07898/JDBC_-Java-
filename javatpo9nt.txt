class Employee{
 float salary=40000;
}
class Programmer extends Employee{
 int bonus=10000;
 public static void main(String args[]){
   Programmer p=new Programmer();
   System.out.println("Programmer salary is:"+p.salary);
   System.out.println("Bonus of Programmer is:"+p.bonus);
}
}





class Animal{
void eat(){System.out.println("eating...");}
}
class Dog extends Animal{
void bark(){System.out.println("barking...");}
}
class TestInheritance{
public static void main(String args[]){
Dog d=new Dog();
d.bark();
d.eat();
}}




class Animal{
void eat(){System.out.println("eating...");}
}
class Dog extends Animal{
void bark(){System.out.println("barking...");}
}
class BabyDog extends Dog{
void weep(){System.out.println("weeping...");}
}
class TestInheritance2{
public static void main(String args[]){
BabyDog d=new BabyDog();
d.weep();
d.bark();
d.eat();
}}



class Animal{
void eat(){System.out.println("eating...");}
}
class Dog extends Animal{
void bark(){System.out.println("barking...");}
}
class Cat extends Animal{
void meow(){System.out.println("meowing...");}
}
class TestInheritance3{
public static void main(String args[]){
Cat c=new Cat();
c.meow();
c.eat();
//c.bark();//C.T.Error
}}

address.java
public class Address {  
String city,state,country;  
  
public Address(String city, String state, String country) {  
    this.city = city;  
    this.state = state;  
    this.country = country;  
}  
  
}  
emp.java

⇧
Javatpoint Logo
Custom Search

Home
Java
C
C++
C#
Servlet
JSP
EJB
Struts2
Mail
Hibernate
Spring
Android
Design P
Quiz
Projects
Interview Q
Comment
Forum
Training

Java Training
Basics of Java
Java Object Class
Java OOPs ConceptsNaming ConventionObject and ClassConstructorstatic keywordthis keyword
Java Inheritance
Inheritance(IS-A)Aggregation(HAS-A) open link
Java Polymorphism
Method OverloadingMethod OverridingCovariant Return Typesuper keywordInstance Initializer blockfinal keywordRuntime PolymorphismDynamic Bindinginstanceof operator
Java Abstraction
Abstract classInterfaceAbstract vs Interface
Java Encapsulation
PackageAccess ModifiersEncapsulation
Java Array
Java Array
Java OOPs Misc
Object classObject CloningMath classWrapper ClassJava RecursionCall By Valuestrictfp keywordjavadoc toolCommand Line ArgObject vs ClassOverloading vs Overriding
Java String
Java Regex
Exception Handling
Java Inner classes
Java Multithreading
Java I/O
Java Networking
Java AWT & Events
Java Swing
JavaFX
Java Applet
Java Reflection
Java Date
Java Conversion
Java Collection
Java JDBC
Java New Features
RMI
Internationalization
Interview Questions
JavaTpoint


next →← prev
Aggregation in Java
If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship.

Consider a situation, Employee object contains many informations such as id, name, emailId etc. It contains one more object named address, which contains its own informations such as city, state, country, zipcode etc. as given below.

class Employee{  
int id;  
String name;  
Address address;//Address is a class  
...  
}  
In such case, Employee has an entity reference address, so relationship is Employee HAS-A address.


Why use Aggregation?
For Code Reusability.
Simple Example of Aggregation
aggregation example
In this example, we have created the reference of Operation class in the Circle class.

class Operation{  
 int square(int n){  
  return n*n;  
 }  
}  
  
class Circle{  
 Operation op;//aggregation  
 double pi=3.14;  
    
 double area(int radius){  
   op=new Operation();  
   int rsquare=op.square(radius);//code reusability (i.e. delegates the method call).  
   return pi*rsquare;  
 }  
  
     
    
 public static void main(String args[]){  
   Circle c=new Circle();  
   double result=c.area(5);  
   System.out.println(result);  
 }  
}  
Test it Now
Output:78.5
      
When use Aggregation?
Code reuse is also best achieved by aggregation when there is no is-a relationship.
Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects involved; otherwise, aggregation is the best choice.
Understanding meaningful example of Aggregation
In this example, Employee has an object of Address, address object contains its own informations such as city, state, country etc. In such case relationship is Employee HAS-A address.

Address.java
public class Address {  
String city,state,country;  
  
public Address(String city, String state, String country) {  
    this.city = city;  
    this.state = state;  
    this.country = country;  
}  
  
}  
Emp.java
public class Emp {  
int id;  
String name;  
Address address;  
  
public Emp(int id, String name,Address address) {  
    this.id = id;  
    this.name = name;  
    this.address=address;  
}  
  
void display(){  
System.out.println(id+" "+name);  
System.out.println(address.city+" "+address.state+" "+address.country);  
}  
  
public static void main(String[] args) {  
Address address1=new Address("gzb","UP","india");  
Address address2=new Address("gno","UP","india");  
  
Emp e=new Emp(111,"varun",address1);  
Emp e2=new Emp(112,"arun",address2);  
      
e.display();  
e2.display();  
      
}  
}  
Test it Now
Output:111 varun
       gzb UP india
       112 arun
       gno UP india      
download this example
Next TopicMethod Overloading in java


← prevnext →


 
Please Share
facebook twitter google plus pinterest
Join Javatpoint Test Series
Placement Papers
TCS
HCL
Infosys
IBM
Accenture
AMCAT
eLitmas
Java
Python
C Programming
Networking
Bank PO/Clerk
UPSSSC
Government Exams
SSC
Civil Services
SBI
GATE
NEET
CAT
Railway
CTET
IIT JEE
Learn Latest Tutorials
OneNote Tutorial
OneNote

Data Warehouse Tutorial
Data Ware.

VBA Tutorial
VBA

SSIS Tutorial
SSIS

NGINX Tutorial
NGINX

Blockchain Tutorial
Blockchain

ETL Tutorial
ETL

Jenkins Tutorial
Jenkins

Pytorch Tutorial
Pytorch

Agile Tutorial
Agile

JIRA Tutorial
JIRA

Tableau Tutorial
Tableau

Preparation
Aptitude
Aptitude

Logical Reasoning
Reasoning

Verbal Ability
Verbal A.

Interview Questions
Interview

Company Interview Questions
Company

Trending Technologies
Artificial Intelligence Tutorial
AI

AWS Tutorial
AWS

Selenium tutorial
Selenium

IoT Tutorial
IoT

Cloud tutorial
Cloud

Hadoop tutorial
Hadoop

ReactJS Tutorial
ReactJS

React Native Tutorial
React Native

Node.js tutorial
Node.js

Data Science Tutorial
D. Science

Angular 7 Tutorial
Angular 7

B.Tech / MCA
DBMS tutorial
DBMS

Data Structures tutorial
DS

DAA tutorial
DAA

Operating System tutorial
OS

Computer Network tutorial
C. Network

Compiler Design tutorial
Compiler D.

Computer Organization and Architecture
COA

Discrete Mathematics Tutorial
D. Math.

Ethical Hacking Tutorial
E. Hacking

Computer Graphics Tutorial
C. Graphics

Software Engineering Tutorial
Software E.

html tutorial
Web Tech.

Cyber Security tutorial
Cyber Sec.

Automata Tutorial
Automata

C Language tutorial
C

C++ tutorial
C++

Java tutorial
Java

.Net Framework tutorial
.Net

Python tutorial
Python

List of Programs
Programs

Control Systems tutorial
Control S.






Javatpoint Services
JavaTpoint offers too many high quality services. Mail us on hr@javatpoint.com, to get more information about given services.

Website Designing
Website Development
Java Development
PHP Development
WordPress
Graphic Designing
Logo
Digital Marketing
On Page and Off Page SEO
PPC
Content Development
Corporate Training
Classroom and Online Training
Data Entry
Training For College Campus
JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at hr@javatpoint.com.
Duration: 1 week to 2 week

Like/Subscribe us for latest updates or newsletter RSS Feed Subscribe to Get Email Alerts Facebook Page Google Page Twitter Page YouTube Blog Page
LEARN TUTORIALS
Learn Java
Learn Data Structures
Learn C Programming
Learn C++ Tutorial
Learn C# Tutorial
Learn PHP Tutorial
Learn HTML Tutorial
Learn JavaScript Tutorial
Learn jQuery Tutorial
Learn Spring Tutorial
OUR WEBSITES
Javatpoint.com
Hindi100.com
Lyricsia.com
Quoteperson.com
Hindi-typing.com
Shayaree.com
Jobandplacement.com
OUR SERVICES
Website Development

Android Development

Website Designing

Digital Marketing

Summer Training

Industrial Training

College Campus Training

CONTACT
Address: G-13, 2nd Floor, Sec-3

Noida, UP, 201301, India

Contact No: 0120-4256464, 9990449935

Contact Us
Subscribe Us
Privacy Policy
Sitemap
© Copyright 2011-2018 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.

 
